{"version":3,"sources":["gfx/FuzzyWobbleCircle.ts","gfx/FuzzyWobble.ts","components/SettingsMenu.tsx","components/DownloadComp.tsx","components/RandomComp.tsx","components/CircleCanvas.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["FuzzyWobbleCircle","length","state","radius","basepoints","points","Array","t","l","Math","PI","stepsize","anchorpoints","pos","y","random","initialAmplitude","sin","x","cos","z","colorspread","THREE","anchors","getAnchors","myspread","round","next","step","p","jitterY","jitterX","forEach","this","ValueLabelComponent","props","children","open","value","popperRef","React","useRef","useEffect","current","update","Tooltip","PopperProps","enterTouchDelay","placement","title","SettingsMenu","handleClick","setState","displayColorPicker","handleClose","handleChange","color","console","log","rgb","setSettings","handleRes","event","v","target","res","w","parseInt","split","h","width","height","pRedraw","render","colorStyle","borderRadius","background","r","g","b","className","Typography","gutterBottom","Select","onChange","MenuItem","Slider","aria-label","defaultValue","parentState","lineNumber","min","max","onChangeCommitted","Button","variant","onClick","FormControlLabel","control","Checkbox","checked","wipe","wipeOnRender","label","randomColor","style","padding","boxShadow","display","cursor","position","zIndex","top","right","bottom","left","Component","DownloadComp","cb","getRandomInt","floor","RandomComp","randomize","stateCallback","seed","initialState","version","invcolor","topright","css","fontSize","justifyContent","CircleCanvas","canvas","createRef","ctx","pixeldata","roundedpixeldata","img","transform","setPixel","offset","i","addPixel","commitImage","newc","putImageData","spreadGrainsLine","center","dir","grains","tp","clone","addScaledVector","basecolor","onLinesChange","setSetting","newstate","setSettingAndRender","redraw","download","e","lnk","document","createElement","filename","href","toDataURL","createEvent","initMouseEvent","window","dispatchEvent","componentDidMount","seedrandom","toString","global","cv","getContext","getImageData","data","Float64Array","clearRect","drawCurveMurder","fwl","drawSpreadCurve","it","rendered_points","getPoints","sub","normalize","set","id","ref","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46f58bbd.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { LinesState } from \"../components/LinesCanvas\";\nimport { FuzzyWobble } from \"./FuzzyWobble\";\n\nclass FuzzyWobbleCircle extends FuzzyWobble {\n  private radius: number;\n  constructor(length: number, state: LinesState, radius: number) {\n    super(length, state);\n    this.radius = radius;\n\n    this.anchors = this.basepoints();\n  }\n\n  /**\n   * creates a initial set of anchor points spanning across the width of the canvas.\n   * slight wiggle in both y location (tapering off to either end) and the degree\n   * of color spread in each point (z)\n   *\n   * @param {number} amplitude amplitude of maximum spread of color in a singular point\n   */\n  basepoints = () => {\n    let points = Array<THREE.Vector3>();\n    let t = -this.length / 2;\n    let l = Math.PI * this.radius;\n    let stepsize = l / this.state.anchorpoints;\n    for (let pos = t; pos < l; pos += stepsize) {\n      let y =\n        (Math.random() - 0.5) * this.state.initialAmplitude +\n        Math.sin(pos / this.radius) * this.radius;\n      //tapering off to either side\n      //Math.sin((pos + this.length / 2) * (Math.PI / this.length));\n      let x =\n        (Math.random() - 0.5) * this.state.initialAmplitude +\n        Math.cos(pos / this.radius) * this.radius;\n\n      let z = (Math.random() - 0.5) * this.state.colorspread;\n      //tapering off to either side\n      //Math.sin((pos + this.length / 2) * (Math.PI / this.length));\n      points = [...points, new THREE.Vector3(x, y, z)];\n    }\n    return points;\n  };\n}\n\nexport { FuzzyWobbleCircle };\n","import * as THREE from \"three\";\nimport { LinesState } from \"../components/LinesCanvas\";\n\nclass FuzzyWobble {\n  protected anchors: Array<THREE.Vector3>;\n  protected length: number;\n  protected state: LinesState;\n\n  constructor(length: number, state: LinesState) {\n    this.length = length;\n    this.state = state;\n    this.anchors = this.basepoints();\n  }\n\n  /**\n   * returns the set of anchorpoints for this curve\n   */\n  getAnchors = () => {\n    return this.anchors;\n  };\n\n  myspread = (pos: number, radius: number) => {\n    return Math.round(\n      (Math.random() - 0.5) *\n        radius *\n        Math.sin((pos + this.length / 2) * (Math.PI / this.length)) ** 2\n    );\n  };\n\n  next = () => {\n    for (var step = 0; step < this.anchors.length; step++) {\n      let p = this.anchors[step];\n      let pos =\n        step * (this.length / this.state.anchorpoints) - this.length / 2;\n      p.y += this.myspread(pos, this.state.jitterY);\n      p.z += this.myspread(pos, this.state.colorspread);\n      p.x += this.myspread(pos, this.state.jitterX);\n    }\n    this.anchors.forEach(p => {});\n  };\n\n  /**\n   * creates a initial set of anchor points spanning across the width of the canvas.\n   * slight wiggle in both y location (tapering off to either end) and the degree\n   * of color spread in each point (z)\n   *\n   * @param {number} amplitude amplitude of maximum spread of color in a singular point\n   */\n\n  basepoints = () => {\n    let points = Array<THREE.Vector3>();\n\n    return points;\n  };\n}\n\nexport { FuzzyWobble };\n","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Tune } from \"mdi-material-ui\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport PropTypes from \"prop-types\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport PopperJs from \"popper.js\";\nimport { SketchPicker, ColorResult } from \"react-color\";\nimport CSS from \"csstype\";\nimport Select from \"@material-ui/core/Select\";\nimport { LinesState } from \"./LinesCanvas\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.number.isRequired\n};\n\ninterface Props {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nfunction ValueLabelComponent(props: Props) {\n  const { children, open, value } = props;\n\n  const popperRef = React.useRef<PopperJs | null>(null);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  return (\n    <Tooltip\n      PopperProps={{\n        popperRef\n      }}\n      open={open}\n      enterTouchDelay={0}\n      placement=\"top\"\n      title={value}\n    >\n      {children}\n    </Tooltip>\n  );\n}\n\ntype SettingsState = {\n  parentState: LinesState;\n  pRedraw: any;\n  setSettings: any;\n  displayColorPicker: boolean;\n  randomColor: boolean;\n  color: any;\n  wipe: boolean;\n  res: string;\n};\n\nexport class SettingsMenu extends Component<object, SettingsState> {\n  public state: SettingsState;\n\n  static propTypes = {\n    setSettings: PropTypes.func.isRequired,\n    parentState: PropTypes.any,\n    pRedraw: PropTypes.any\n  };\n\n  constructor(props: SettingsState) {\n    super(props);\n    this.state = {\n      parentState: props.parentState,\n      pRedraw: props.pRedraw,\n      setSettings: props.setSettings,\n      displayColorPicker: false,\n      color: props.parentState.color,\n      randomColor: props.parentState.randomColor,\n      wipe: props.parentState.wipeOnRender,\n      res: \"1920,1080\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      displayColorPicker: !this.state.displayColorPicker\n    });\n  };\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  handleChange = (color: ColorResult) => {\n    console.log(color.rgb);\n    this.state.setSettings({ color: color.rgb });\n    this.setState({ color: color.rgb });\n  };\n\n  handleRes = (event: any) => {\n    let v = event.target.value;\n    this.setState({ res: event.target.value });\n    let w = parseInt(v.split(\",\")[0]);\n    let h = parseInt(v.split(\",\")[1]);\n    this.state.setSettings({ width: w, height: h });\n    this.state.pRedraw();\n  };\n\n  render = () => {\n    const swatchStyle: CSS.Properties = {\n      padding: \"5px\",\n      background: \"#fff\",\n      borderRadius: \"1px\",\n      boxShadow: \"0 0 0 1px rgba(0,0,0,.1)\",\n      display: \"inline-block\",\n      cursor: \"pointer\"\n    };\n    const coverStyle: CSS.Properties = {\n      position: \"fixed\",\n      top: \"0px\",\n      right: \"0px\",\n      bottom: \"0px\",\n      left: \"0px\"\n    };\n    const colorStyle: CSS.Properties = {\n      width: \"36px\",\n      height: \"14px\",\n      borderRadius: \"2px\",\n      background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b},1.0)`\n    };\n    const popoverStyle: CSS.Properties = {\n      position: \"absolute\",\n      zIndex: 2\n    };\n    return (\n      <div className=\"settingsbutton\">\n        <Tune />\n\n        <div className=\"settingsmenu\">\n          <div>\n            <Typography gutterBottom>Resolution</Typography>\n\n            <Select value={this.state.res} onChange={this.handleRes}>\n              <MenuItem value={\"1920,1080\"}>1920x1080</MenuItem>\n              <MenuItem value={\"2560,1080\"}>2560x1080</MenuItem>\n              <MenuItem value={\"2560,1440\"}>2560x1440</MenuItem>\n              <MenuItem value={\"3440,1440\"}>3440x1440</MenuItem>\n              <MenuItem value={\"3840,2160\"}>3840x2160</MenuItem>\n              <MenuItem value={\"5120,2160\"}>5120x2160</MenuItem>\n            </Select>\n\n            <Typography gutterBottom>Number of lines</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.lineNumber}\n              min={20}\n              max={300}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ lineNumber: value });\n              }}\n            />\n            <Typography gutterBottom>Number of anchor points</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.anchorpoints}\n              min={5}\n              max={300}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ anchorpoints: value });\n              }}\n            />\n            <Typography gutterBottom>Initialization amplitude</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.initialAmplitude}\n              min={20}\n              max={300}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ initialAmplitude: value });\n              }}\n            />\n            <Typography gutterBottom>Anchor points jitter for x</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.jitterX}\n              min={0}\n              max={200}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ jitterX: value });\n              }}\n            />\n            <Typography gutterBottom>Anchor points jitter for y</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.jitterY}\n              min={0}\n              max={200}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ jitterY: value });\n              }}\n            />\n            <Typography gutterBottom>Max colorspread</Typography>\n            <Slider\n              ValueLabelComponent={ValueLabelComponent}\n              aria-label=\"custom thumb label\"\n              defaultValue={this.state.parentState.colorspread}\n              min={20}\n              max={300}\n              onChangeCommitted={(event: object, value: any) => {\n                this.state.setSettings({ colorspread: value });\n              }}\n            />\n\n            <p>\n              <Button\n                variant=\"outlined\"\n                className=\"button\"\n                onClick={this.state.pRedraw}\n              >\n                Render\n              </Button>\n            </p>\n\n            <p>\n              <FormControlLabel\n                control={<Checkbox checked={this.state.wipe} />}\n                onChange={() => {\n                  this.state.setSettings({\n                    wipeOnRender: !this.state.wipe\n                  });\n                  this.setState({ wipe: !this.state.wipe });\n                }}\n                label=\"Wipe before new render\"\n              />\n            </p>\n\n            <p>\n              <FormControlLabel\n                control={<Checkbox checked={this.state.randomColor} />}\n                onChange={() => {\n                  this.state.setSettings({\n                    randomColor: !this.state.randomColor\n                  });\n                  this.setState({ randomColor: !this.state.randomColor });\n                }}\n                label=\"Random colors\"\n              />\n            </p>\n\n            <div>\n              <div style={swatchStyle} onClick={this.handleClick}>\n                <div style={colorStyle} />\n              </div>\n              {this.state.displayColorPicker ? (\n                <div style={popoverStyle}>\n                  <div style={coverStyle} onClick={this.handleClose} />\n                  <SketchPicker\n                    color={this.state.color}\n                    onChange={this.handleChange}\n                  />\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n","/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\n\n//import React, { useState } from \"react\";\n\nimport { Download } from \"mdi-material-ui\";\n//import { Button } from \"@material-ui/core\";\n//import Grid from \"@material-ui/core/Grid\";\n\ninterface DownloadProps {\n  cb: any;\n}\n\n// const downloadMenucss = css({\n//   width: \"200px\",\n//   position: \"absolute\",\n//   right: \"5px\",\n//   top: \"0px\",\n//   backgroundColor: \"rgba(255, 255, 255, 0.9)\"\n// });\n\n// const hidden = css(\n//   {\n//     display: \"none\"\n//   },\n//   downloadMenucss\n// );\n\n// const shown = css(\n//   {\n//     display: \"block\"\n//   },\n//   downloadMenucss\n// );\n\nfunction DownloadComp(props: DownloadProps) {\n  //   const [showMenu, setShowMenu] = React.useState(false);\n  return (\n    <div className=\"download\">\n      <Download\n        // onMouseEnter={() => setShowMenu(showMenu => !showMenu)}\n        // onClick={() => setShowMenu(showMenu => !showMenu)}\n        onClick={() => {\n          props.cb();\n        }}\n      />\n      {/* <div\n        className=\"downloadMenu\"\n        onMouseLeave={() => setShowMenu(showMenu => !showMenu)}\n        css={showMenu ? shown : hidden}\n      >\n        <Grid container spacing={0}>\n          <Grid item xs={6}>\n            <Button onClick={(event: React.MouseEvent<HTMLButtonElement,MouseEvent>)=>{props.cb(event,1920,1080)}}>1920 x 1080</Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button>2560 x 1080</Button>\n          </Grid>\n        </Grid>\n        <Grid container spacing={0}>\n          <Grid item xs={6}>\n            <Button>2560 x 1440</Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button>3440 x 1440</Button>\n          </Grid>\n        </Grid>\n        <Grid container spacing={0}>\n          <Grid item xs={6}>\n            <Button>3840 x 2160</Button>\n          </Grid>\n          <Grid item xs={6}>\n            <Button>5120 x 2160</Button>\n          </Grid>\n        </Grid>\n      </div> */}\n    </div>\n  );\n}\n\nexport default DownloadComp;\n","import React from \"react\";\n\nimport { DiceMultiple } from \"mdi-material-ui\";\n\ninterface RandomCompProps {\n  stateCallback: any;\n}\n\nfunction getRandomInt(max: number) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nfunction randomize(cb: any) {\n  let r = {\n    lineNumber: getRandomInt(280) + 20,\n    seed: getRandomInt(9999),\n    anchorpoints: getRandomInt(40) + 20,\n    jitterX: getRandomInt(5),\n    jitterY: getRandomInt(30),\n    colorspread: getRandomInt(20) + 10,\n    initialAmplitude: getRandomInt(280) + 20,\n    color: {\n      r: getRandomInt(255),\n      g: getRandomInt(255),\n      b: getRandomInt(255)\n    }\n  };\n  cb(r);\n}\n\nfunction RandomComp(props: RandomCompProps) {\n  return (\n    <div>\n      <DiceMultiple\n        onClick={() => {\n          randomize(props.stateCallback);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default RandomComp;\n","import React, { createRef, Component } from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport * as THREE from \"three\";\nimport { FuzzyWobble } from \"../gfx/FuzzyWobble\";\nimport { FuzzyWobbleCircle } from \"../gfx/FuzzyWobbleCircle\";\n\nimport seedrandom from \"seedrandom\";\nimport { SettingsMenu } from \"./SettingsMenu\";\nimport DownloadComp from \"./DownloadComp\";\nimport RandomComp from \"./RandomComp\";\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\n\nconst initialState = {\n  version: 1, //0\n  lineNumber: 60, //1\n  width: 1920, //2\n  height: 1080, //3\n  seed: 1, //4\n  anchorpoints: 29, //5\n  jitterX: 5, //6\n  jitterY: 11, //7\n  colorspread: 5, //8\n  initialAmplitude: 30, //9\n  wipeOnRender: true, //10\n  randomColor: false, //11\n  displayColorPicker: false, //12\n  color: { r: 0, g: 0, b: 0 }, //13\n  invcolor: { r: 255, g: 255, b: 255 } //14\n};\n\nconst topright = css({\n  display: \"flex\",\n  position: \"absolute\",\n  top: \"8px\",\n  right: \"16px\",\n  fontSize: \"18px\",\n  zIndex: 100,\n  width: \"100px\",\n  justifyContent: \"space-around\"\n});\n\nexport type CircleState = Readonly<typeof initialState>;\n\nexport class CircleCanvas extends Component<object, CircleState> {\n  private canvas = createRef<HTMLCanvasElement>();\n  private ctx?: CanvasRenderingContext2D;\n  private pixeldata?: Float64Array;\n  private roundedpixeldata?: Uint8ClampedArray;\n  private img?: ImageData;\n\n  public state: CircleState = initialState;\n  static propTypes = {\n    seed: PropTypes.number\n  };\n\n  constructor(props: any) {\n    super(props);\n\n    let seed = 0;\n    if (props.seed) {\n      seed = props.seed;\n    } else {\n      seed = Math.floor(Math.random() * 1000000);\n    }\n\n    this.state = {\n      ...initialState,\n      width: 1920,\n      height: 1080,\n      seed: seed\n    };\n  }\n\n  /**\n   * transformation of coordinates so 0,0 is in the middle of the canvas\n   */\n  transform = (x: number, y: number) => {\n    x += this.state.width / 2;\n    y += this.state.height / 2;\n    return new THREE.Vector2(x, y);\n  };\n\n  /**\n   * set a pixel color value directly.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} color color array rgba of floats (0.0..1.0)\n   */\n  setPixel = (x: number, y: number, color: Array<number>) => {\n    if (this.pixeldata) {\n      let p = this.transform(x, y);\n      x = Math.floor(p.x);\n      y = Math.floor(p.y);\n      let offset = (y * this.state.width + x) * 4;\n\n      for (var i = 0; i < 4; i++) {\n        this.pixeldata[offset + i] = color[i];\n      }\n    }\n  };\n\n  /**\n   * sets a pixel color value by adding the values passed in\n   * @param {number} x\n   * @param {number} y\n   * @param {number} color color array rgba of floats (0.0..1.0)\n   */\n  addPixel = (x: number, y: number, color: Array<number>) => {\n    if (this.pixeldata) {\n      let p = this.transform(x, y);\n      x = Math.floor(p.x);\n      y = Math.floor(p.y);\n      let offset = (y * this.state.width + x) * 4;\n      for (var i = 0; i < 3; i++) {\n        this.pixeldata[offset + i] = color[i] + this.pixeldata[offset + i];\n      }\n      this.pixeldata[offset + 3] = 0.0;\n    }\n  };\n\n  /**\n   * commits the image data to the actual canvas\n   * we're working with an inverted image, since the pixeldata array is initialized\n   * with 0.\n   */\n  commitImage = () => {\n    if (this.pixeldata && this.roundedpixeldata && this.ctx && this.img) {\n      for (var t = 0; t < this.pixeldata.length; t++) {\n        let newc = Math.floor(\n          //255*(1.0 - (this.pixeldata[t]  / this.max[t % 4]))\n          (1 - this.pixeldata[t]) * 255\n        );\n        this.roundedpixeldata[t] = newc;\n      }\n      this.ctx.putImageData(this.img, 0, 0);\n    }\n  };\n\n  /**\n   * waddya think?! ;)\n   */\n  getRandomInt = (max: number) => {\n    return Math.floor(Math.random() * Math.floor(max));\n  };\n\n  /**\n   * spreads random specks of color along the direction dir, up to a distance of\n   * length, starting on center\n   * @param {THREE.Vector3}  center origin of spread (only x and y are being used)\n   * @param {THREE.Vector3} dir direction of spread (only x and y are being used)\n   * @param {number} length length of line where specks can possible fall\n   *\n   */\n  spreadGrainsLine = (\n    center: THREE.Vector3,\n    dir: THREE.Vector3,\n    length: number\n  ) => {\n    var grains = this.getRandomInt(20) + 5;\n    let newc = 0.04 / grains;\n\n    for (var i = 0; i < grains; i++) {\n      let tp = center.clone();\n      let t = Math.random() - 0.5;\n      tp.addScaledVector(dir, t * length);\n      let basecolor = [\n        newc * (this.state.invcolor.r / 255),\n        newc * (this.state.invcolor.g / 255),\n        newc * (this.state.invcolor.b / 255),\n        0.0\n      ];\n      this.addPixel(tp.x, tp.y, basecolor);\n    }\n  };\n\n  onLinesChange = (event: object, value: any) => {\n    this.setState({ lineNumber: value });\n  };\n\n  setSetting = (newstate: object) => {\n    this.setState(newstate);\n  };\n\n  setSettingAndRender = (newstate: object) => {\n    this.setSetting(newstate);\n    this.redraw();\n  };\n\n  download = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    /// create an \"off-screen\" anchor tag\n    var lnk = document.createElement(\"a\"),\n      e;\n\n    var filename = `wallpaper-${this.state.width}x${this.state.height}.png`;\n    /// the key here is to set the download attribute of the a tag\n    lnk.download = filename;\n\n    /// convert canvas content to data-uri for link. When download\n    /// attribute is set the content pointed to by link will be\n    /// pushed as \"download\" in HTML5 capable browsers\n    if (this.canvas.current != null) {\n      lnk.href = this.canvas.current.toDataURL(\"image/png;base64\");\n\n      /// create a \"fake\" click-event to trigger the download\n      if (document.createEvent) {\n        e = document.createEvent(\"MouseEvents\");\n        e.initMouseEvent(\n          \"click\",\n          true,\n          true,\n          window,\n          0,\n          0,\n          0,\n          0,\n          0,\n          false,\n          false,\n          false,\n          false,\n          0,\n          null\n        );\n\n        lnk.dispatchEvent(e);\n      }\n    }\n  };\n\n  componentDidMount = () => {\n    // let lochash = window.location.hash;\n    // if (lochash !== \"\") {\n    //   let vals = JSON.parse(decodeURI(lochash.replace(\"#\", \"\")));\n    //   if (vals[0] === 1) {\n    //     this.setState({\n    //       ...this.state,\n    //       lineNumber: vals[1],\n    //       seed: vals[4],\n    //       anchorpoints: vals[5],\n    //       jitterX: vals[6],\n    //       jitterY: vals[7],\n    //       colorspread: vals[8],\n    //       initialAmplitude: vals[30],\n    //       wipeOnRender: vals[10],\n    //       randomColor: vals[11],\n    //       color: vals[13]\n    //     });\n    //   }\n    // }\n    seedrandom(this.state.seed.toString(), { global: true });\n\n    if (this.canvas.current) {\n      let cv = this.canvas.current;\n      cv.width = this.state.width;\n      cv.height = this.state.height;\n      this.ctx = cv.getContext(\"2d\") as CanvasRenderingContext2D;\n      this.img = this.ctx.getImageData(\n        0,\n        0,\n        this.state.width,\n        this.state.height\n      );\n      this.roundedpixeldata = this.img.data;\n      this.pixeldata = new Float64Array(this.roundedpixeldata.length);\n      this.redraw();\n    }\n  };\n\n  redraw = () => {\n    this.setState({\n      invcolor: {\n        r: 255 - this.state.color.r,\n        g: 255 - this.state.color.g,\n        b: 255 - this.state.color.b\n      }\n    });\n    if (this.state.wipeOnRender) {\n      if (this.ctx && this.roundedpixeldata) {\n        this.ctx.clearRect(0, 0, this.state.width, this.state.height);\n        this.pixeldata = new Float64Array(this.roundedpixeldata.length);\n      }\n    }\n    //window.location.hash = encodeURI(JSON.stringify(Object.values(this.state)));\n    this.drawCurveMurder();\n    console.log(this.state);\n    this.commitImage();\n  };\n\n  /**\n   * draws a set of curves with each subsequent one having its anchor\n   * points moved around randomly a bit\n   *\n   */\n  drawCurveMurder = () => {\n    let fwl = new FuzzyWobbleCircle(this.state.width, this.state, 300);\n\n    for (var i = 0; i < 60; i++) {\n      this.drawSpreadCurve(fwl, i);\n      if (this.state.randomColor) {\n        this.setState({\n          color: {\n            r: this.getRandomInt(255),\n            g: this.getRandomInt(255),\n            b: this.getRandomInt(255)\n          }\n        });\n        this.setState({\n          invcolor: {\n            r: 255 - this.state.color.r,\n            g: 255 - this.state.color.g,\n            b: 255 - this.state.color.b\n          }\n        });\n      }\n      fwl.next();\n    }\n  };\n\n  drawSpreadCurve = (fwl: FuzzyWobble, it: number) => {\n    let curve = new THREE.CatmullRomCurve3(fwl.getAnchors());\n\n    //new THREE.SplineCurve(fwl.getPoints());\n\n    let rendered_points = curve.getPoints(this.state.width * 5);\n\n    for (var i = 1; i < rendered_points.length; i++) {\n      //get normalized direction of line at this point\n      var dir = rendered_points[i]\n        .clone()\n        .sub(rendered_points[i - 1])\n        .normalize();\n      //get right angle\n      dir.set(-dir.y, dir.x, dir.z);\n      this.spreadGrainsLine(rendered_points[i], dir, rendered_points[i].z);\n    }\n  };\n\n  render = () => {\n    return (\n      <div>\n        <canvas id=\"circlecanvas\" ref={this.canvas}></canvas>\n        <div css={topright}>\n          <RandomComp stateCallback={this.setSettingAndRender} />\n          <DownloadComp cb={this.download} />\n          <SettingsMenu\n            setSettings={this.setSetting}\n            parentState={this.state}\n            pRedraw={this.redraw}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\n// import { LinesCanvas } from \"./components/LinesCanvas\";\nimport { CircleCanvas } from \"./components/CircleCanvas\";\n// import Grid from \"@material-ui/core/Grid\";\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      {/* <LinesCanvas /> */}\n      <CircleCanvas />\n      {/* <Grid container spacing={0}>\n        <Grid container spacing={0}>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n        </Grid>\n        <Grid container spacing={0}>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n        </Grid>\n\n        <Grid container spacing={0}>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n          <Grid item xs={4}>\n            <LinesCanvas width={window.innerWidth/3} height={window.innerHeight/3}></LinesCanvas>\n          </Grid>\n        </Grid>\n\n      </Grid> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}